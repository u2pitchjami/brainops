# brainops/sql/db_utils.py

from __future__ import annotations

from typing import Any, Protocol, runtime_checkable

# Types de retour classiques
RowDict = dict[str, Any]
RowTuple = tuple[Any, ...]

# Supporte les 2 types de retours possibles
Row = RowDict | RowTuple


@runtime_checkable
class DictCursorProtocol(Protocol):
    def execute(self, query: str, params: tuple[Any, ...] | dict[str, Any] | None = ...) -> int: ...
    def fetchone(self) -> dict[str, Any] | None: ...
    def fetchall(self) -> list[dict[str, Any]]: ...
    def close(self) -> None: ...
    def __enter__(self) -> DictCursorProtocol: ...
    def __exit__(self, exc_type: Any, exc_val: Any, exc_tb: Any) -> None: ...
    def nextset(self) -> bool | None: ...

    rowcount: int | None
    lastrowid: int | None


@runtime_checkable
class TupleCursorProtocol(Protocol):
    def execute(self, query: str, params: tuple[Any, ...] | dict[str, Any] | None = ...) -> int: ...
    def fetchone(self) -> tuple[Any, ...] | None: ...
    def fetchall(self) -> list[tuple[Any, ...]]: ...
    def close(self) -> None: ...
    def __enter__(self) -> TupleCursorProtocol: ...
    def __exit__(self, exc_type: Any, exc_val: Any, exc_tb: Any) -> None: ...
    def nextset(self) -> bool | None: ...

    rowcount: int | None
    lastrowid: int | None


# # Curseur minimal DB (base de tous)
# @runtime_checkable
# class CursorProtocol(Protocol):
#     rowcount: int | None
#     lastrowid: int | None

#     def execute(
#         self,
#         query: str,
#         params: tuple[Any, ...] | dict[str, Any] | None = ...
#     ) -> int: ...

#     def fetchone(self) -> Row | None: ...
#     def fetchall(self) -> list[Row]: ...

#     def nextset(self) -> bool | None: ...
#     def close(self) -> None: ...

#     def __enter__(self) -> CursorProtocol: ...
#     def __exit__(self, exc_type: Any, exc_val: Any, exc_tb: Any) -> None: ...


# # Curseur typé en dict[str, Any]
# @runtime_checkable
# class DictCursorProtocol(CursorProtocol, Protocol):
#     def fetchone(self) -> RowDict | None: ...
#     def fetchall(self) -> list[RowDict]: ...


# # Curseur typé en tuple[Any, ...]
# @runtime_checkable
# class TupleCursorProtocol(CursorProtocol, Protocol):
#     def fetchone(self) -> RowTuple | None: ...
#     def fetchall(self) -> list[RowTuple]: ...


# @runtime_checkable
# class CursorProtocol(Protocol):
#     """
#     Protocole minimal compatible avec les curseurs pymysql, utilisé pour typage mypy des fonctions SQL génériques.
#     """

#     rowcount: int | None
#     lastrowid: int | None

#     # Contexte "with"
#     def __enter__(self) -> CursorProtocol: ...
#     def __exit__(self, exc_type: Any, exc_val: Any, exc_tb: Any) -> None: ...

#     # Exécution de requêtes
#     def execute(
#         self,
#         operation: str,
#         params: Sequence[Any] | Mapping[str, Any] | None = ...,
#     ) -> None: ...

#     def nextset(self) -> bool | None: ...

#     # Récupération
#     def close(self) -> None: ...

#     def fetchone(self) -> dict[str, Any] | None: ...
#     def fetchall(self) -> list[dict[str, Any]]: ...
