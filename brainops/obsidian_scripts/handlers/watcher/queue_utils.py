import logging
import time
import threading

logger = logging.getLogger("obsidian_notes." + __name__)

def get_lock_key(note_id, file_path) -> str:
    """
    GÃ©nÃ¨re une clÃ© unique pour le verrouillage de traitement d'une note.
    Si le note_id est disponible, il est prioritaire.
    Sinon, on utilise le chemin du fichier comme clÃ© temporaire.
    """
    if note_id:
        return f"note:{note_id}"
    return f"path:{str(file_path)}"


class PendingNoteLockManager:
    """
    GÃ¨re un systÃ¨me de verrous (locks) logiques pour Ã©viter
    que plusieurs traitements concurrents s'exÃ©cutent sur une mÃªme note.

    Chaque clÃ© est horodatÃ©e Ã  l'acquisition pour permettre une purge automatique.
    """
    
    def __init__(self):
        self._locks = {}  # stocke key: timestamp
        self._lock = threading.Lock()  # protÃ¨ge l'accÃ¨s concurrent
        
    def acquire(self, key: str) -> bool:
        """
        Tente de poser un verrou sur la clÃ© donnÃ©e.
        Cette mÃ©thode vÃ©rifie et crÃ©e le lock de maniÃ¨re atomique (protÃ©gÃ©e par un verrou threading.Lock),
        donc elle NE fait PAS appel Ã  is_locked() pour Ã©viter tout risque de concurrence.
        """
        with self._lock:
            if key in self._locks:
                return False
            self._locks[key] = int(time.time())
            return True

    def release(self, key: str):
        """
        LibÃ¨re le verrou correspondant Ã  la clÃ©, sâ€™il existe.
        """
        with self._lock:
            if key in self._locks:
                del self._locks[key]

    def is_locked(self, key: str) -> bool:
        """
        VÃ©rifie si la clÃ© est verrouillÃ©e.
        """
        with self._lock:
            return key in self._locks

    def purge_expired(self, timeout: int = 7200) -> None:
        """
        Supprime tous les verrous ayant dÃ©passÃ© le dÃ©lai d'expiration (en secondes).
        """
        now = int(time.time())
        with self._lock:
            expired = [k for k, t in self._locks.items() if now - t > timeout]
            for k in expired:
                del self._locks[k]
                logger.warning(f"[LOCK] ðŸ”¥ Lock expirÃ© supprimÃ© : {k}")

    def count(self) -> int:
        """
        Retourne le nombre de verrous actifs.
        """
        with self._lock:
            return len(self._locks)
    
    def get_all_locks(self) -> dict:
        """
        Retourne une copie des locks actifs avec leurs timestamps.
        Utile pour les logs ou lâ€™inspection.
        """
        with self._lock:
            return self._locks.copy()
